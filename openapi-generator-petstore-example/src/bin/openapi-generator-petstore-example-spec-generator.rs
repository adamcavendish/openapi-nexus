//! Script to generate OpenAPI YAML and JSON specifications from the Petstore API

use clap::Parser;
use openapi_generator_petstore_example::ApiDoc;
use std::path::PathBuf;
use utoipa::OpenApi;

const GENERATED_FILE_HEADER_YAML: &str = r#"# DO NOT EDIT - This file is automatically generated.
# Any manual changes will be overwritten on the next generation.
# To make changes, modify the source code and regenerate this file.

"#;

#[derive(Parser)]
#[command(about = "Generate OpenAPI YAML and JSON specifications from the Petstore API")]
struct Args {
    /// Output directory for generated files
    #[arg(short, long, default_value = "tests/fixtures/valid")]
    output_dir: PathBuf,
}

fn main() {
    let args = Args::parse();

    let openapi = ApiDoc::openapi();

    let yaml = openapi
        .to_yaml()
        .expect("Failed to serialize OpenAPI spec to YAML");
    let yaml_with_header = format!("{}{}", GENERATED_FILE_HEADER_YAML, yaml);

    let json = openapi
        .to_pretty_json()
        .expect("Failed to serialize OpenAPI spec to JSON");

    std::fs::create_dir_all(&args.output_dir).expect("Failed to create output directory");

    let yaml_path = args.output_dir.join("petstore.yaml");
    std::fs::write(&yaml_path, yaml_with_header)
        .expect("Failed to write OpenAPI spec to YAML file");

    let json_path = args.output_dir.join("petstore.json");
    std::fs::write(&json_path, json).expect("Failed to write OpenAPI spec to JSON file");

    println!("âœ… OpenAPI specifications generated:");
    println!("   ðŸ“„ YAML: {}", yaml_path.display());
    println!("   ðŸ“„ JSON: {}", json_path.display());
    println!("ðŸ“Š Endpoints: {}", openapi.paths.paths.len());
    println!(
        "ðŸ“‹ Components: {}",
        openapi.components.as_ref().map_or(0, |c| c.schemas.len())
    );
}
