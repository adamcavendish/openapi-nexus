//! TypeScript generated file header AST

use serde::{Deserialize, Serialize};

use crate::ast::Comment;
use crate::ast_trait::{EmissionContext, ToRcDocWithContext};
use crate::emission::error::EmitError;
use pretty::RcDoc;

/// TypeScript generated file header
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GeneratedFileHeader {
    /// The comment containing the header text
    comment: Comment,
    /// Whether to include the header (useful for testing or custom generation)
    enabled: bool,
}

impl GeneratedFileHeader {
    /// Create a new generated file header with default text
    pub fn new() -> Self {
        Self {
            comment: Comment::multi_line(vec![
                "DO NOT EDIT - This file is automatically generated.".to_string(),
                "Any manual changes will be overwritten on the next generation.".to_string(),
                "To make changes, modify the source code and regenerate this file.".to_string(),
            ]),
            enabled: true,
        }
    }

    /// Create a custom generated file header
    pub fn custom(comment: Comment) -> Self {
        Self {
            comment,
            enabled: true,
        }
    }

    /// Enable or disable the header
    pub fn with_enabled(mut self, enabled: bool) -> Self {
        self.enabled = enabled;
        self
    }
}

impl Default for GeneratedFileHeader {
    fn default() -> Self {
        Self::new()
    }
}

impl ToRcDocWithContext for GeneratedFileHeader {
    fn to_rcdoc_with_context(
        &self,
        context: &EmissionContext,
    ) -> Result<RcDoc<'static, ()>, EmitError> {
        if !self.enabled {
            return Ok(RcDoc::nil());
        }
        self.comment.to_rcdoc_with_context(context)
    }
}
