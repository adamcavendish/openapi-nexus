/* tslint:disable */
/* eslint-disable */
/**
 * Comprehensive Schema Types Example
 *
 * Comprehensive test for all OpenAPI v3.1.2 schema types
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by openapi-nexus.
 * Do not edit the class manually.
 */

/** Required enum field in object */
export interface RequiredEnumField {
status: "active" | "inactive"
}

export function instanceOfRequiredEnumField(value: object): value is RequiredEnumField {
    if (!('status' in value) || (value as any)['status'] === undefined) return false;
    return true;
}

export function RequiredEnumFieldFromJSON(json: any): RequiredEnumField {
    return RequiredEnumFieldFromJSONTyped(json, false);
}

export function RequiredEnumFieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): RequiredEnumField {
    if (json == null) {
        return json;
    }
    return {
        'status': json['status'],
    };
}

export function RequiredEnumFieldToJSON(value?: RequiredEnumField | null): any {
    return RequiredEnumFieldToJSONTyped(value, false);
}

export function RequiredEnumFieldToJSONTyped(value?: RequiredEnumField | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    return {
        'status': value['status'],
    };
}

export const RequiredEnumFieldPropertyValidationAttributesMap: {
    [property: string]: {
        maxLength?: number,
        minLength?: number,
        pattern?: string,
        maximum?: number,
        exclusiveMaximum?: boolean,
        minimum?: number,
        exclusiveMinimum?: boolean,
        multipleOf?: number,
        maxItems?: number,
        minItems?: number,
        uniqueItems?: boolean
    }
} = {
};