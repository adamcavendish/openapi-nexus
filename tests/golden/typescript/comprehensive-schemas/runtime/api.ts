// DO NOT EDIT - This file is automatically generated.
// Any manual changes will be overwritten on the next generation.
// To make changes, modify the source code and regenerate this file.

import { Configuration } from './config';
/**
 * Base API class for all API clients
 */
export class BaseAPI {
/**
 * API configuration
 */
configuration?: Configuration
  /**
   * Initialize the BaseAPI
   */
  constructor(configuration?: Configuration) {
    this.configuration = configuration;
  }
  /**
   * Make an HTTP request
   */
  request(context: RequestContext): Promise<Response> {
    const { url, init } = context;
    const baseUrl = this.configuration?.basePath || '';
    const fullUrl = baseUrl ? `${baseUrl}${url}` : url;

    // Build headers with authentication
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      ...this.configuration?.headers,
    };

    // Add authentication headers
    if (this.configuration?.apiKey) {
      headers['X-API-Key'] = this.configuration.apiKey;
    }
    if (this.configuration?.accessToken) {
      headers['Authorization'] = `Bearer ${this.configuration.accessToken}`;
    }
    if (this.configuration?.username && this.configuration?.password) {
      const credentials = btoa(`${this.configuration.username}:${this.configuration.password}`);
      headers['Authorization'] = `Basic ${credentials}`;
    }

    // Merge request init options
    const requestInit: RequestInit = {
      ...init,
      headers: {
        ...headers,
        ...init?.headers,
      },
    };

    // Make the fetch request
    return fetch(fullUrl, requestInit);
  }
}
/**
 * Error thrown when a required parameter is missing
 */
export class RequiredError extends Error {
/**
 * The field that is required
 */
field: string
  /**
   * Create a new RequiredError
   */
  constructor(field: string) {
    super(field);
    this.field = field;
  }
}
/**
 * Request context for API calls
 */
export interface RequestContext {
  /**
   * Request URL
   */
  url: string,   /**
   * Request initialization options
   */
  init?: RequestInit,
}