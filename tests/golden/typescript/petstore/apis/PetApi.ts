// DO NOT EDIT - This file is automatically generated.
// Any manual changes will be overwritten on the next generation.
// To make changes, modify the source code and regenerate this file.

import { BaseAPI } from '../runtime/api'
import { Configuration } from '../runtime/config'
import type { ApiResponse } from '../models/ApiResponse'
import type { Pet } from '../models/Pet'

/**
 * API client for pet operations
 */
export class PetApi extends BaseAPI {
/**
 * Initialize the API client
 */
constructor(configuration?: Configuration) {
  super(configuration);
}
/**
 * Add a new pet to the store
 */
async addPet(body: Pet): Promise<Pet> {
    // Build URL with path parameters
    const url = `${this.configuration?.basePath || ''}/pet`;
  
    // Build query parameters
    const queryParams = new URLSearchParams();
  
  
    // Build headers
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      ...this.configuration?.headers,
    };
  
    // Add header parameters
  
  
    // Add authentication
    if (this.configuration?.apiKey) {
      headers['X-API-Key'] = this.configuration.apiKey;
    }
    if (this.configuration?.accessToken) {
      headers['Authorization'] = `Bearer ${this.configuration.accessToken}`;
    }
    if (this.configuration?.username && this.configuration?.password) {
      const credentials = btoa(`${this.configuration.username}:${this.configuration.password}`);
      headers['Authorization'] = `Basic ${credentials}`;
    }
  
    // Build final URL
    const finalUrl = queryParams.toString()
      ? `${url}?${queryParams.toString()}`
      : url;
  
    // Make request
    return this.request({
      url: finalUrl,
      init: {
        method: 'POST',
        headers,
        body: JSON.stringify(body),
      },
    }).then(response => response.json());
}
/**
 * Update an existing pet
 */
async updatePet(body: Pet): Promise<Pet> {
    // Build URL with path parameters
    const url = `${this.configuration?.basePath || ''}/pet`;
  
    // Build query parameters
    const queryParams = new URLSearchParams();
  
  
    // Build headers
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      ...this.configuration?.headers,
    };
  
    // Add header parameters
  
  
    // Add authentication
    if (this.configuration?.apiKey) {
      headers['X-API-Key'] = this.configuration.apiKey;
    }
    if (this.configuration?.accessToken) {
      headers['Authorization'] = `Bearer ${this.configuration.accessToken}`;
    }
    if (this.configuration?.username && this.configuration?.password) {
      const credentials = btoa(`${this.configuration.username}:${this.configuration.password}`);
      headers['Authorization'] = `Basic ${credentials}`;
    }
  
    // Build final URL
    const finalUrl = queryParams.toString()
      ? `${url}?${queryParams.toString()}`
      : url;
  
    // Make request
    return this.request({
      url: finalUrl,
      init: {
        method: 'PUT',
        headers,
        body: JSON.stringify(body),
      },
    }).then(response => response.json());
}
/**
 * Find pets by status
 */
async findPetsByStatus(status: string): Promise<Array<string>> {
    // Build URL with path parameters
    const url = `${this.configuration?.basePath || ''}/pet/findByStatus`;
  
    // Build query parameters
    const queryParams = new URLSearchParams();
  
    if (status !== undefined) {
      queryParams.append('status', String(status));
    }
  
  
    // Build headers
    const headers: Record<string, string> = {
      ...this.configuration?.headers,
    };
  
    // Add header parameters
  
  
    // Add authentication
    if (this.configuration?.apiKey) {
      headers['X-API-Key'] = this.configuration.apiKey;
    }
    if (this.configuration?.accessToken) {
      headers['Authorization'] = `Bearer ${this.configuration.accessToken}`;
    }
    if (this.configuration?.username && this.configuration?.password) {
      const credentials = btoa(`${this.configuration.username}:${this.configuration.password}`);
      headers['Authorization'] = `Basic ${credentials}`;
    }
  
    // Build final URL
    const finalUrl = queryParams.toString()
      ? `${url}?${queryParams.toString()}`
      : url;
  
    // Make request
    return this.request({
      url: finalUrl,
      init: {
        method: 'GET',
        headers,
      },
    }).then(response => response.json());
}
/**
 * Find pets by tags
 */
async findPetsByTags(tags: Array<string>): Promise<Array<string>> {
    // Build URL with path parameters
    const url = `${this.configuration?.basePath || ''}/pet/findByTags`;
  
    // Build query parameters
    const queryParams = new URLSearchParams();
  
    if (tags !== undefined) {
      queryParams.append('tags', String(tags));
    }
  
  
    // Build headers
    const headers: Record<string, string> = {
      ...this.configuration?.headers,
    };
  
    // Add header parameters
  
  
    // Add authentication
    if (this.configuration?.apiKey) {
      headers['X-API-Key'] = this.configuration.apiKey;
    }
    if (this.configuration?.accessToken) {
      headers['Authorization'] = `Bearer ${this.configuration.accessToken}`;
    }
    if (this.configuration?.username && this.configuration?.password) {
      const credentials = btoa(`${this.configuration.username}:${this.configuration.password}`);
      headers['Authorization'] = `Basic ${credentials}`;
    }
  
    // Build final URL
    const finalUrl = queryParams.toString()
      ? `${url}?${queryParams.toString()}`
      : url;
  
    // Make request
    return this.request({
      url: finalUrl,
      init: {
        method: 'GET',
        headers,
      },
    }).then(response => response.json());
}
/**
 * Find pet by ID
 */
async getPetById(petId: string): Promise<Pet> {
    // Build URL with path parameters
    const url = `${this.configuration?.basePath || ''}/pet/${petId}`;
  
    // Build query parameters
    const queryParams = new URLSearchParams();
  
  
    // Build headers
    const headers: Record<string, string> = {
      ...this.configuration?.headers,
    };
  
    // Add header parameters
  
  
    // Add authentication
    if (this.configuration?.apiKey) {
      headers['X-API-Key'] = this.configuration.apiKey;
    }
    if (this.configuration?.accessToken) {
      headers['Authorization'] = `Bearer ${this.configuration.accessToken}`;
    }
    if (this.configuration?.username && this.configuration?.password) {
      const credentials = btoa(`${this.configuration.username}:${this.configuration.password}`);
      headers['Authorization'] = `Basic ${credentials}`;
    }
  
    // Build final URL
    const finalUrl = queryParams.toString()
      ? `${url}?${queryParams.toString()}`
      : url;
  
    // Make request
    return this.request({
      url: finalUrl,
      init: {
        method: 'GET',
        headers,
      },
    }).then(response => response.json());
}
/**
 * Update a pet in the store with form data
 */
async updatePetWithForm(petId: string, name?: string, status?: string): Promise<Pet> {
    // Build URL with path parameters
    const url = `${this.configuration?.basePath || ''}/pet/${petId}`;
  
    // Build query parameters
    const queryParams = new URLSearchParams();
  
    if (name !== undefined) {
      queryParams.append('name', String(name));
    }
  
    if (status !== undefined) {
      queryParams.append('status', String(status));
    }
  
  
    // Build headers
    const headers: Record<string, string> = {
  
      ...this.configuration?.headers,
    };
  
    // Add header parameters
  
  
    // Add authentication
    if (this.configuration?.apiKey) {
      headers['X-API-Key'] = this.configuration.apiKey;
    }
    if (this.configuration?.accessToken) {
      headers['Authorization'] = `Bearer ${this.configuration.accessToken}`;
    }
    if (this.configuration?.username && this.configuration?.password) {
      const credentials = btoa(`${this.configuration.username}:${this.configuration.password}`);
      headers['Authorization'] = `Basic ${credentials}`;
    }
  
    // Build final URL
    const finalUrl = queryParams.toString()
      ? `${url}?${queryParams.toString()}`
      : url;
  
    // Make request
    return this.request({
      url: finalUrl,
      init: {
        method: 'POST',
        headers,
      },
    }).then(response => response.json());
}
/**
 * Delete a pet
 */
async deletePet(petId: string): Promise<Response> {
    // Build URL with path parameters
    const url = `${this.configuration?.basePath || ''}/pet/${petId}`;
  
    // Build query parameters
    const queryParams = new URLSearchParams();
  
  
    // Build headers
    const headers: Record<string, string> = {
      ...this.configuration?.headers,
    };
  
    // Add header parameters
  
  
    // Add authentication
    if (this.configuration?.apiKey) {
      headers['X-API-Key'] = this.configuration.apiKey;
    }
    if (this.configuration?.accessToken) {
      headers['Authorization'] = `Bearer ${this.configuration.accessToken}`;
    }
    if (this.configuration?.username && this.configuration?.password) {
      const credentials = btoa(`${this.configuration.username}:${this.configuration.password}`);
      headers['Authorization'] = `Basic ${credentials}`;
    }
  
    // Build final URL
    const finalUrl = queryParams.toString()
      ? `${url}?${queryParams.toString()}`
      : url;
  
    // Make request
    return this.request({
      url: finalUrl,
      init: {
        method: 'DELETE',
        headers,
      },
    });
}
/**
 * Upload an image
 */
async uploadFile(petId: string, additionalMetadata?: string): Promise<ApiResponse> {
    // Build URL with path parameters
    const url = `${this.configuration?.basePath || ''}/pet/${petId}/uploadImage`;
  
    // Build query parameters
    const queryParams = new URLSearchParams();
  
    if (additionalMetadata !== undefined) {
      queryParams.append('additionalMetadata', String(additionalMetadata));
    }
  
  
    // Build headers
    const headers: Record<string, string> = {
  
      ...this.configuration?.headers,
    };
  
    // Add header parameters
  
  
    // Add authentication
    if (this.configuration?.apiKey) {
      headers['X-API-Key'] = this.configuration.apiKey;
    }
    if (this.configuration?.accessToken) {
      headers['Authorization'] = `Bearer ${this.configuration.accessToken}`;
    }
    if (this.configuration?.username && this.configuration?.password) {
      const credentials = btoa(`${this.configuration.username}:${this.configuration.password}`);
      headers['Authorization'] = `Basic ${credentials}`;
    }
  
    // Build final URL
    const finalUrl = queryParams.toString()
      ? `${url}?${queryParams.toString()}`
      : url;
  
    // Make request
    return this.request({
      url: finalUrl,
      init: {
        method: 'POST',
        headers,
      },
    }).then(response => response.json());
}
}