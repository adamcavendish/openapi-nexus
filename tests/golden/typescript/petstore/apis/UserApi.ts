/* tslint:disable */
/* eslint-disable */
/**
 * Petstore API
 *
 * This is a sample Pet Store Server based on the OpenAPI 3.1 specification
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by openapi-nexus.
 * Do not edit the class manually.
 */

import { BaseAPI, JSONApiResponse, VoidApiResponse, ResponseError, type Configuration, type InitOverrideFunction } from '../runtime/runtime';
import { UserFromJSON } from '../models/User';

/** API client for user operations */

export interface UserApiInterface {
  /** Create user */
  createUserRaw: (body: User, initOverrides?: InitOverrideFunction | RequestInit) => Promise<JSONApiResponse<User>>;
  /** Create user */
  createUser: (body: User, initOverrides?: InitOverrideFunction | RequestInit) => Promise<User>;
  /** Creates list of users with given input array */
  createUsersWithListInputRaw: (body: Array<string>, initOverrides?: InitOverrideFunction | RequestInit) => Promise<JSONApiResponse<User>>;
  /** Creates list of users with given input array */
  createUsersWithListInput: (body: Array<string>, initOverrides?: InitOverrideFunction | RequestInit) => Promise<User>;
  /** Logs user into the system */
  loginUserRaw: (username?: string, password?: string, initOverrides?: InitOverrideFunction | RequestInit) => Promise<VoidApiResponse>;
  /** Logs user into the system */
  loginUser: (username?: string, password?: string, initOverrides?: InitOverrideFunction | RequestInit) => Promise<void>;
  /** Logs out current logged in user session */
  logoutUserRaw: (initOverrides?: InitOverrideFunction | RequestInit) => Promise<VoidApiResponse>;
  /** Logs out current logged in user session */
  logoutUser: (initOverrides?: InitOverrideFunction | RequestInit) => Promise<void>;
  /** Get user by user name */
  getUserByNameRaw: (username: string, initOverrides?: InitOverrideFunction | RequestInit) => Promise<JSONApiResponse<User>>;
  /** Get user by user name */
  getUserByName: (username: string, initOverrides?: InitOverrideFunction | RequestInit) => Promise<User>;
  /** Update user */
  updateUserRaw: (username: string, body: User, initOverrides?: InitOverrideFunction | RequestInit) => Promise<VoidApiResponse>;
  /** Update user */
  updateUser: (username: string, body: User, initOverrides?: InitOverrideFunction | RequestInit) => Promise<void>;
  /** Delete user */
  deleteUserRaw: (username: string, initOverrides?: InitOverrideFunction | RequestInit) => Promise<VoidApiResponse>;
  /** Delete user */
  deleteUser: (username: string, initOverrides?: InitOverrideFunction | RequestInit) => Promise<void>;
}

export class UserApi extends BaseAPI implements UserApiInterface {

  /** Initialize the API client */
  constructor(configuration?: Configuration) {
    // Call BaseAPI constructor with provided configuration or default
    super(configuration ?? DefaultConfig);
  }

  /** Create user */
  async createUserRaw(body: User, initOverrides?: InitOverrideFunction | RequestInit): Promise<JSONApiResponse<User>> {
    // Build path with path parameters
    let urlPath = `/user`;

    // Build query parameters
    const queryParameters: any = {};
    // Build headers
    const headerParameters: Record<string, string> = {
      'Content-Type': 'application/json',
      ...this.configuration?.headers,
    };

    // Add header parameters
    // Prepare request body
    const body = body;

    // Make request
    const response = await this.request({
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body,
    }, initOverrides);

    return new JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
  }

  /** Create user */
  async createUser(body: User, initOverrides?: InitOverrideFunction | RequestInit): Promise<User> {
      const response = await this.createUserRaw(body, initOverrides);
      return await response.value();
  }

  /** Creates list of users with given input array */
  async createUsersWithListInputRaw(body: Array<string>, initOverrides?: InitOverrideFunction | RequestInit): Promise<JSONApiResponse<User>> {
    // Build path with path parameters
    let urlPath = `/user/createWithList`;

    // Build query parameters
    const queryParameters: any = {};
    // Build headers
    const headerParameters: Record<string, string> = {
      'Content-Type': 'application/json',
      ...this.configuration?.headers,
    };

    // Add header parameters
    // Prepare request body
    const body = body;

    // Make request
    const response = await this.request({
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body,
    }, initOverrides);

    return new JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
  }

  /** Creates list of users with given input array */
  async createUsersWithListInput(body: Array<string>, initOverrides?: InitOverrideFunction | RequestInit): Promise<User> {
      const response = await this.createUsersWithListInputRaw(body, initOverrides);
      return await response.value();
  }

  /** Logs user into the system */
  async loginUserRaw(username?: string, password?: string, initOverrides?: InitOverrideFunction | RequestInit): Promise<VoidApiResponse> {
    // Build path with path parameters
    let urlPath = `/user/login`;

    // Build query parameters
    const queryParameters: any = {};

    // Build headers
    const headerParameters: Record<string, string> = {
      ...this.configuration?.headers,
    };

    // Add header parameters

    // Make request
    const response = await this.request({
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
    }, initOverrides);

    return new JSONApiResponse(response);
  }

  /** Logs user into the system */
  async loginUser(username?: string, password?: string, initOverrides?: InitOverrideFunction | RequestInit): Promise<void> {
      const response = await this.loginUserRaw(username, password, initOverrides);
      return await response.value();
  }

  /** Logs out current logged in user session */
  async logoutUserRaw(initOverrides?: InitOverrideFunction | RequestInit): Promise<VoidApiResponse> {
    // Build path with path parameters
    let urlPath = `/user/logout`;

    // Build query parameters
    const queryParameters: any = {};

    // Build headers
    const headerParameters: Record<string, string> = {
      ...this.configuration?.headers,
    };

    // Add header parameters

    // Make request
    const response = await this.request({
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
    }, initOverrides);

    return new JSONApiResponse(response);
  }

  /** Logs out current logged in user session */
  async logoutUser(initOverrides?: InitOverrideFunction | RequestInit): Promise<void> {
      const response = await this.logoutUserRaw(initOverrides);
      return await response.value();
  }

  /** Get user by user name */
  async getUserByNameRaw(username: string, initOverrides?: InitOverrideFunction | RequestInit): Promise<JSONApiResponse<User>> {
    // Build path with path parameters
    let urlPath = `/user/${username}`;

    // Build query parameters
    const queryParameters: any = {};

    // Build headers
    const headerParameters: Record<string, string> = {
      ...this.configuration?.headers,
    };

    // Add header parameters

    // Make request
    const response = await this.request({
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
    }, initOverrides);

    return new JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
  }

  /** Get user by user name */
  async getUserByName(username: string, initOverrides?: InitOverrideFunction | RequestInit): Promise<User> {
      const response = await this.getUserByNameRaw(username, initOverrides);
      return await response.value();
  }

  /** Update user */
  async updateUserRaw(username: string, body: User, initOverrides?: InitOverrideFunction | RequestInit): Promise<VoidApiResponse> {
    // Build path with path parameters
    let urlPath = `/user/${username}`;

    // Build query parameters
    const queryParameters: any = {};
    // Build headers
    const headerParameters: Record<string, string> = {
      'Content-Type': 'application/json',
      ...this.configuration?.headers,
    };

    // Add header parameters
    // Prepare request body
    const body = body;

    // Make request
    const response = await this.request({
        path: urlPath,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body,
    }, initOverrides);

    return new JSONApiResponse(response);
  }

  /** Update user */
  async updateUser(username: string, body: User, initOverrides?: InitOverrideFunction | RequestInit): Promise<void> {
      const response = await this.updateUserRaw(username, body, initOverrides);
      return await response.value();
  }

  /** Delete user */
  async deleteUserRaw(username: string, initOverrides?: InitOverrideFunction | RequestInit): Promise<VoidApiResponse> {
    // Build path with path parameters
    let urlPath = `/user/${username}`;

    // Build query parameters
    const queryParameters: any = {};

    // Build headers
    const headerParameters: Record<string, string> = {
      ...this.configuration?.headers,
    };

    // Add header parameters

    // Make request
    const response = await this.request({
        path: urlPath,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
    }, initOverrides);

    return new VoidApiResponse(response);
  }

  /** Delete user */
  async deleteUser(username: string, initOverrides?: InitOverrideFunction | RequestInit): Promise<void> {
      const response = await this.deleteUserRaw(username, initOverrides);
      return await response.value();
  }
}