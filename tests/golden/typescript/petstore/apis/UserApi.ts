// DO NOT EDIT - This file is automatically generated.
// Any manual changes will be overwritten on the next generation.
// To make changes, modify the source code and regenerate this file.

import { BaseAPI } from '../runtime/api'
import { Configuration } from '../runtime/config'
import type { User } from '../models/User'

/**
 * API client for user operations
 */
export class UserApi extends BaseAPI {
/**
 * Initialize the API client
 */
constructor(configuration?: Configuration) {
  super(configuration);
}
/**
 * Create user
 */
async createUser(body: User): Promise<User> {
    const url = `${this.configuration?.basePath || ''}/user`;return this.request({
      url,
      init: {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(body),
      },
    }).then(response => response.json());
}
/**
 * Creates list of users with given input array
 */
async createUsersWithListInput(body: Array<string>): Promise<User> {
    const url = `${this.configuration?.basePath || ''}/user/createWithList`;return this.request({
      url,
      init: {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(body),
      },
    }).then(response => response.json());
}
/**
 * Logs user into the system
 */
async loginUser(username?: string, password?: string): Promise<Response> {
    const url = `${this.configuration?.basePath || ''}/user/login`;
    return this.request({
      url,
      init: {
        method: 'GET',
      }
    }).then(response => response.json());
}
/**
 * Logs out current logged in user session
 */
async logoutUser(): Promise<Response> {
    const url = `${this.configuration?.basePath || ''}/user/logout`;
    return this.request({
      url,
      init: {
        method: 'GET',
      }
    }).then(response => response.json());
}
/**
 * Get user by user name
 */
async getUserByName(username: string): Promise<User> {
    const url = `${this.configuration?.basePath || ''}/user/${username}`;
    return this.request({
      url,
      init: {
        method: 'GET',
      }
    }).then(response => response.json());
}
/**
 * Update user
 */
async updateUser(username: string, body: User): Promise<Response> {
    const url = `${this.configuration?.basePath || ''}/user/${username}`;return this.request({
      url,
      init: {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(body),
      },
    }).then(response => response.json());
}
/**
 * Delete user
 */
async deleteUser(username: string): Promise<Response> {
    const url = `${this.configuration?.basePath || ''}/user/${username}`;
    return this.request({
      url,
      init: {
        method: 'DELETE',
      }
    });
}
}