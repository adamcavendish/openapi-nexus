//! API client generation for TypeScript

use crate::generator::TypeScriptGenerator;
use utoipa::openapi::OpenApi;

/// API client generator for TypeScript
pub struct ApiClientGenerator {
    generator: TypeScriptGenerator,
}

impl ApiClientGenerator {
    pub fn new() -> Self {
        Self {
            generator: TypeScriptGenerator::new(),
        }
    }

    /// Generate API client code from OpenAPI specification
    pub fn generate_api_client(
        &self,
        _openapi: &OpenApi,
    ) -> Result<String, crate::generator::GeneratorError> {
        // For now, generate a simple placeholder API client
        let code = r#"// DO NOT EDIT - This file is automatically generated.
// Any manual changes will be overwritten on the next generation.
// To make changes, modify the source code and regenerate this file.

/**
 * Generated API client for consuming the API
 */
export class ApiClient {
  private baseUrl: string;
  private headers: Record<string, string>;

  constructor(baseUrl: string, headers?: Record<string, string>) {
    this.baseUrl = baseUrl;
    this.headers = headers || {};
  }

  /**
   * Make a GET request
   */
  async get<T>(path: string): Promise<T> {
    const response = await fetch(`${this.baseUrl}${path}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...this.headers,
      },
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    return await response.json();
  }

  /**
   * Make a POST request
   */
  async post<T>(path: string, body?: any): Promise<T> {
    const response = await fetch(`${this.baseUrl}${path}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        ...this.headers,
      },
      body: body ? JSON.stringify(body) : undefined,
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    return await response.json();
  }
}"#;

        Ok(code.to_string())
    }
}

impl Default for ApiClientGenerator {
    fn default() -> Self {
        Self::new()
    }
}
