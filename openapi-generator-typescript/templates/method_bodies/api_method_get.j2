  // Build URL with path parameters
  const url = `${this.configuration?.basePath || ''}{{ path | replace('{', '${') }}`;

  // Build query parameters
  const queryParams = new URLSearchParams();
{% for param in query_params %}
  if ({{ param.name }} !== undefined) {
    queryParams.append('{{ param.name }}', String({{ param.name }}));
  }
{% endfor %}

  // Build headers
  const headers: Record<string, string> = {
    ...this.configuration?.headers,
  };

  // Add header parameters
{% for param in header_params %}
  if ({{ param.name }} !== undefined) {
    headers['{{ param.name }}'] = String({{ param.name }});
  }
{% endfor %}

  // Add authentication
  if (this.configuration?.apiKey) {
    headers['X-API-Key'] = this.configuration.apiKey;
  }
  if (this.configuration?.accessToken) {
    headers['Authorization'] = `Bearer ${this.configuration.accessToken}`;
  }
  if (this.configuration?.username && this.configuration?.password) {
    const credentials = btoa(`${this.configuration.username}:${this.configuration.password}`);
    headers['Authorization'] = `Basic ${credentials}`;
  }

  // Build final URL
  const finalUrl = queryParams.toString() 
    ? `${url}?${queryParams.toString()}`
    : url;

  // Make request and return response with error handling
  return this.request({
    url: finalUrl,
    init: {
      method: 'GET',
      headers,
    },
  }).then(response => {
    if (response.ok) {
      return response.json().then(data => new JSONApiResponse(data, response));
    } else {
      throw new ResponseError(response, 'Request failed');
    }
  });
