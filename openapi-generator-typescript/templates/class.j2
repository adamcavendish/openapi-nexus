{%- if documentation -%}
/**
 * {{ documentation }}
 */
{%- endif -%}
export class {{ name }}{% if generics -%}<{{ generics | join(', ') }}>{%- endif -%} {
{%- for property in properties %}
{%- if property.documentation %}
  /** {{ property.documentation }} */
{%- endif %}
  {{ property.name }}{% if property.optional %}?{% endif %}: {{ property.type_expr }};
{%- endfor %}
{%- for method in methods %}
{%- if method.documentation %}
  /**
   * {{ method.documentation }}
   */
{%- endif %}
  {%- if method.is_async %}async {% endif %}{{ method.name }}({% for param in method.parameters %}{{ param.name }}{% if param.optional %}?{% endif %}{% if param.type_expr %}: {{ param.type_expr }}{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}){% if method.return_type %}: {{ method.return_type }}{% endif %} {
{%- if method.body %}
{{ method.body | indent(4, true) }}
{%- elif method.name == "constructor" %}
    this.baseUrl = baseUrl;
    this.headers = headers;
{%- elif method.name == "get" %}
    return fetch(`${this.baseUrl}${path}`, {
      method: 'GET',
      headers: this.headers,
    }).then(response => response.json());
{%- elif method.name == "post" %}
    return fetch(`${this.baseUrl}${path}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        ...this.headers,
      },
      body: body ? JSON.stringify(body) : undefined,
    }).then(response => response.json());
{%- elif method.name == "put" %}
    return fetch(`${this.baseUrl}${path}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        ...this.headers,
      },
      body: body ? JSON.stringify(body) : undefined,
    }).then(response => response.json());
{%- elif method.name == "delete" %}
    return fetch(`${this.baseUrl}${path}`, {
      method: 'DELETE',
      headers: this.headers,
    }).then(response => response.json());
{%- else %}
    // TODO: Implement method
{%- endif %}
  }
{%- endfor %}
}
